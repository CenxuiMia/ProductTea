AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Federate access from Cognito user Pools to QuickSight
Resources:
  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: CensUsers
      AutoVerifiedAttributes:
        - "email"
      Schema:
        - AttributeDataType: "String"
          Name: email
          Required: True
  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
        ClientName: Cens
        GenerateSecret: false
        UserPoolId: !Ref CognitoUserPool
        WriteAttributes:
          - "email"
  CognitoIdPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Ref AWS::StackName
      CognitoIdentityProviders:
        -
          ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName
      AllowUnauthenticatedIdentities: false

  AuthRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Federated:
                - "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud:
                - !Ref CognitoIdPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr:
                - "authenticated"
      Path: "/"
      Policies:
        -
          PolicyName: "CensCreateUser"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "quicksight:CreateUser"
                Resource: "*"
  AuthRoleAttach:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref CognitoIdPool
      Roles:
        authenticated: !GetAtt AuthRole.Arn
  S3WebSite:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
  CloudFrontDistro:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Join [ ".", [ !Ref S3WebSite, !Join [ "-", [ "s3", "website", !Ref 'AWS::Region' ] ], "amazonaws.com" ] ]
          Id: S3WebSite
          CustomOriginConfig:
            HTTPPort: '80'
            HTTPSPort: '443'
            OriginProtocolPolicy: http-only
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3WebSite
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          DefaultTTL: 0
          MaxTTL: 0
          MinTTL: 0
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'
Outputs:

  CognitoIdentityPool:
    Description: <Cognito Identity Pool>
    Value: !Ref CognitoIdPool
  CognitoUserPool:
    Description: <Cognito User Pool>
    Value: !Ref CognitoUserPool
  CognitoUserPoolClient:
    Description: <Cognito User Pool App>
    Value: !Ref CognitoUserPoolClient
  CognitoIdentityAuthRole:
    Description: <Cognito Identity IAM Auth Role>
    Value: !Ref AuthRole
  S3Website:
    Description: <S3 WebSite URL>
    Value: !GetAtt S3WebSite.WebsiteURL
  CloudFrontDistro:
    Description: <CloudFront Distribution URL>
    Value: !GetAtt CloudFrontDistro.DomainName